import React, { useState, useEffect } from 'react';
import { getTokens } from '../services/Service';

// Tokenizer models
const MODELS = [
    { label: 'GPT-4o & GPT-4o mini', value: 'gpt-4o' },
    { label: 'GPT-3.5 & GPT-4', value: 'gpt-3.5' },
    { label: 'GPT-3 (Legacy)', value: 'gpt-3' },
];

const EXAMPLE_TEXT = '300000';

/**
 * Tokenizer component for visualizing tokenization of text for different models.
 * Generated by Copilot
 */
const Tokenizer: React.FC = () => {
    const [model, setModel] = useState(MODELS[0].value);
    const [input, setInput] = useState(EXAMPLE_TEXT);
    const [tokens, setTokens] = useState<string[]>([]);
    const [loading, setLoading] = useState(false);

    /**
     * Fetch tokens from backend for given text and model.
     * @param text - Input text
     * @param model - Model identifier
     * Generated by Copilot
     */
    const calculateTokens = async (text: string, model: string) => {
        setLoading(true);
        try {
            const data = await getTokens(text, model);
            setTokens(data.tokens || []);
        } catch {
            setTokens([]);
        }
        setLoading(false);
    };

    // Initial load
    useEffect(() => {
        calculateTokens(EXAMPLE_TEXT, model);
        // eslint-disable-next-line
    }, []);

    /**
     * Handle textarea input change and update tokens.
     * @param e - Change event
     * Generated by Copilot
     */
    const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
        const value = e.target.value;
        setInput(value);
        calculateTokens(value, model);
    };

    /**
     * Handle model selection change and update tokens.
     * @param value - Selected model value
     * Generated by Copilot
     */
    const handleModelChange = (value: string) => {
        setModel(value);
        calculateTokens(input, value);
    };

    /**
     * Clear input and tokens.
     * Generated by Copilot
     */
    const handleClear = () => {
        setInput('');
        setTokens([]);
    };

    /**
     * Set example text and tokens.
     * Generated by Copilot
     */
    const handleExample = () => {
        setInput(EXAMPLE_TEXT);
        calculateTokens(EXAMPLE_TEXT, model);
    };

    return (
        <div className="Tokenizer" style={{ maxWidth: 600, margin: '40px auto', fontFamily: 'sans-serif' }}>
            <h1 style={{ fontWeight: 600, fontSize: 32, marginBottom: 8 }}>Tokenizer <span role="img" aria-label="sparkle">âœ¨</span></h1>
            <h2 style={{ fontWeight: 500, fontSize: 18, margin: '16px 0 8px 0' }}>Learn about language model tokenization</h2>
            <p style={{ color: '#444', fontSize: 15, margin: '8px 0' }}>
                OpenAI's large language models process text using <b>tokens</b>, which are common sequences of characters found in a set of text. The models learn to understand the statistical relationships between these tokens, and excel at producing the next token in a sequence of tokens. <a href="#" style={{ color: '#1a7f37' }}>Learn more.</a>
            </p>
            <p style={{ color: '#444', fontSize: 15, margin: '8px 0 24px 0' }}>
                You can use the tool below to understand how a piece of text might be tokenized by a language model, and the total count of tokens in that piece of text.
            </p>
            <div style={{ display: 'flex', gap: 8, marginBottom: 16 }}>
                {MODELS.map(m => (
                    <button
                        key={m.value}
                        onClick={() => handleModelChange(m.value)}
                        style={{
                            padding: '6px 16px',
                            borderRadius: 8,
                            border: '1px solid #ccc',
                            background: model === m.value ? '#e6e6e6' : '#fafafa',
                            fontWeight: model === m.value ? 600 : 400,
                            cursor: 'pointer'
                        }}
                    >
                        {m.label}
                    </button>
                ))}
            </div>
            <textarea
                value={input}
                onChange={handleInputChange}
                rows={5}
                style={{
                    width: '100%',
                    fontSize: 16,
                    padding: 12,
                    borderRadius: 8,
                    border: '1px solid #ccc',
                    marginBottom: 12,
                    fontFamily: 'monospace'
                }}
                placeholder="Enter text here..."
            />
            <div style={{ display: 'flex', gap: 8, marginBottom: 16 }}>
                <button
                    onClick={handleClear}
                    style={{
                        padding: '6px 16px',
                        borderRadius: 8,
                        border: '1px solid #ccc',
                        background: '#fafafa',
                        cursor: 'pointer'
                    }}
                >
                    Clear
                </button>
                <button
                    onClick={handleExample}
                    style={{
                        padding: '6px 16px',
                        borderRadius: 8,
                        border: '1px solid #ccc',
                        background: '#fafafa',
                        cursor: 'pointer'
                    }}
                >
                    Show example
                </button>
            </div>
            <div style={{ display: 'flex', gap: 32, marginBottom: 16 }}>
                <div>
                    <div style={{ fontWeight: 600, fontSize: 16 }}>Tokens</div>
                    <div style={{ fontSize: 20 }}>{tokens.length}</div>
                </div>
                <div>
                    <div style={{ fontWeight: 600, fontSize: 16 }}>Characters</div>
                    <div style={{ fontSize: 20 }}>{input.length}</div>
                </div>
            </div>
            <div style={{ background: '#f6f8fa', borderRadius: 8, padding: 12, minHeight: 40 }}>
                {loading ? (
                    <span style={{ color: '#888' }}>Loading...</span>
                ) : (
                    tokens.map((tok, idx) => (
                        <span
                            key={idx}
                            style={{
                                background: '#e6f4ea',
                                color: '#3b3b3b',
                                borderRadius: 4,
                                padding: '2px 6px',
                                marginRight: 4,
                                fontFamily: 'monospace',
                                fontSize: 16,
                                display: 'inline-block'
                            }}
                        >
                            {tok}
                        </span>
                    ))
                )}
            </div>
        </div>
    );
};

export default Tokenizer;

// Generated by Copilot